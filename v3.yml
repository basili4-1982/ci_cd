name: Go CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    # РЕШЕНИЕ 6: Используем матрицу для тестирования на разных версиях Go
    strategy:
      matrix:
        go-version: [ '1.21', '1.22' ] # Проверяем совместимость с разными версиями
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }} # Динамически подставляем версию из матрицы
      - uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }} # Добавили версию Go в ключ кэша!
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-

      # РЕШЕНИЕ 7: Проверяем согласованность go.mod и go.sum
      - name: Check go.mod tidiness
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum # Если файлы изменились после tidy - падаем с ошибкой

      - name: Build
        run: go build ./...
      - name: Run Tests
        run: go test -race -v ./...
      - name: Check Formatting
        run: test -z "$(gofmt -l .)"
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.59.0

  # РЕШЕНИЕ 8: Отдельная job для кросс-платформенной сборки
  build-multi-platform:
    needs: lint-and-test # Запускается только если первая job успешно прошла
    strategy:
      matrix:
        # Матрица для целевых платформ сборки
        platform:
          - { os: ubuntu-latest,  goos: linux,   goarch: amd64,   suffix: '' }
          - { os: ubuntu-latest,  goos: linux,   goarch: arm64,   suffix: '' }
          - { os: windows-latest, goos: windows, goarch: amd64,   suffix: '.exe' }
          - { os: macOS-latest,   goos: darwin,  goarch: amd64,   suffix: '' }
    runs-on: ${{ matrix.platform.os }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: '1.22' # Фиксируем версию для сборки релиза

      - name: Build for ${{ matrix.platform.goos }}/${{ matrix.platform.goarch }}
        run: |
          GOOS=${{ matrix.platform.goos }} GOARCH=${{ matrix.platform.goarch }} go build \
          -o "myapp-${{ matrix.platform.goos }}-${{ matrix.platform.goarch }}${{ matrix.platform.suffix }}" \
          ./cmd/myapp

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.platform.goos }}-${{ matrix.platform.goarch }}
          path: "myapp-${{ matrix.platform.goos }}-${{ matrix.platform.goarch }}${{ matrix.platform.suffix }}"
